{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "test1",
      "provenance": [],
      "authorship_tag": "ABX9TyPyyVHUtR+xGXLK+yNjd9rN",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Carolinacastioni/API-project/blob/master/CNN\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "udxCV-5NSarU",
        "colab_type": "code",
        "outputId": "92aacad1-1def-49ed-e14f-56b4bba911ac",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        }
      },
      "source": [
        "from os.path import join\n",
        "from google.colab import drive\n",
        "# Montar el DRIVE\n",
        "ROOT = \"/content/drive\"\n",
        "drive.mount(ROOT)\n",
        "# Apuntar a la carpeta de trabajo\n",
        "PROJ = \"My Drive/Colab Notebooks\" # This is a custom path.\n",
        "PROJECT_PATH = join(ROOT, PROJ)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n",
            "\n",
            "Enter your authorization code:\n",
            "··········\n",
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JSnmsBVZTJrG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from __future__ import print_function\n",
        "import keras\n",
        "from keras.datasets import mnist\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Dropout, Flatten\n",
        "from keras.layers import Conv2D, MaxPooling2D\n",
        "from keras.layers.normalization import BatchNormalization\n",
        "from keras.optimizers import SGD\n",
        "from keras.optimizers import Adam\n",
        "from sklearn.model_selection import train_test_split\n",
        "from keras.models import model_from_json\n",
        "from keras import backend as K\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from PIL import Image\n",
        "import pandas as pd\n",
        "import time\n",
        "import json\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import glob\n",
        "import cv2\n",
        "import seaborn as sns"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vca5KUXa74Ed",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data_all = pd.read_pickle(join(PROJECT_PATH,'data_final_all.pkl'))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-C6BRhlcLQLW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "2b540186-9b50-4af7-9c3d-4a1ca8225225"
      },
      "source": [
        "data_all.head()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>label</th>\n",
              "      <th>image_path</th>\n",
              "      <th>image_name</th>\n",
              "      <th>arrays</th>\n",
              "      <th>0_2</th>\n",
              "      <th>4_6</th>\n",
              "      <th>8_12</th>\n",
              "      <th>15_20</th>\n",
              "      <th>25_32</th>\n",
              "      <th>38_43</th>\n",
              "      <th>48_53</th>\n",
              "      <th>60_100</th>\n",
              "      <th>gt</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0_2</td>\n",
              "      <td>../OUTPUT/faces_detected/0_2/image_669.jpg</td>\n",
              "      <td>image_669.jpg</td>\n",
              "      <td>[[58, 64, 76, 90, 109, 119, 135, 150, 166, 164...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>[1, 0, 0, 0, 0, 0, 0, 0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0_2</td>\n",
              "      <td>../OUTPUT/faces_detected/0_2/image_346.jpg</td>\n",
              "      <td>image_346.jpg</td>\n",
              "      <td>[[10, 13, 14, 22, 41, 37, 33, 35, 34, 37, 32, ...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>[1, 0, 0, 0, 0, 0, 0, 0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0_2</td>\n",
              "      <td>../OUTPUT/faces_detected/0_2/image_1135.jpg</td>\n",
              "      <td>image_1135.jpg</td>\n",
              "      <td>[[193, 194, 193, 188, 186, 186, 180, 146, 82, ...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>[1, 0, 0, 0, 0, 0, 0, 0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0_2</td>\n",
              "      <td>../OUTPUT/faces_detected/0_2/image_231.jpg</td>\n",
              "      <td>image_231.jpg</td>\n",
              "      <td>[[72, 80, 101, 108, 110, 111, 115, 121, 128, 1...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>[1, 0, 0, 0, 0, 0, 0, 0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0_2</td>\n",
              "      <td>../OUTPUT/faces_detected/0_2/image_696.jpg</td>\n",
              "      <td>image_696.jpg</td>\n",
              "      <td>[[35, 67, 100, 78, 45, 64, 75, 144, 163, 156, ...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>[1, 0, 0, 0, 0, 0, 0, 0]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  label  ...                        gt\n",
              "0   0_2  ...  [1, 0, 0, 0, 0, 0, 0, 0]\n",
              "2   0_2  ...  [1, 0, 0, 0, 0, 0, 0, 0]\n",
              "5   0_2  ...  [1, 0, 0, 0, 0, 0, 0, 0]\n",
              "6   0_2  ...  [1, 0, 0, 0, 0, 0, 0, 0]\n",
              "7   0_2  ...  [1, 0, 0, 0, 0, 0, 0, 0]\n",
              "\n",
              "[5 rows x 13 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q_g96Ct5LSFA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "f6dd6a9a-f617-4dcf-8a57-6bd0447658d2"
      },
      "source": [
        "data_all.label.value_counts()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "25_32     4202\n",
              "38_43     1946\n",
              "8_12      1833\n",
              "4_6       1611\n",
              "0_2       1536\n",
              "15_20     1313\n",
              "60_100     692\n",
              "48_53      676\n",
              "Name: label, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tRH3W6eh3Jx2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X = np.stack(data_all['arrays'])\n",
        "X = X / 255.0"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jWsZ4wCbLgXg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y = np.stack(data_all['gt'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yB1TFL5ALZDa",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZOOTtY4ZLZGn",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "b6127f2e-dec6-4f8d-deee-608abdd6f1e1"
      },
      "source": [
        "print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(11047, 48, 48) (2762, 48, 48) (11047, 8) (2762, 8)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mCiyDJIJLZI0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "img_rows, img_cols, img_channels = 48, 48, 1\n",
        "\n",
        "input_shape= (img_rows, img_cols, img_channels)\n",
        "\n",
        "num_classes = 8"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Jpsp4Bj1LZLY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "if K.image_data_format() == 'channels_first':\n",
        "    X_train = X_train.reshape(X_train.shape[0], 1, img_rows, img_cols)\n",
        "    X_test = X_test.reshape(X_test.shape[0], 1, img_rows, img_cols)\n",
        "    input_shape = (1, img_rows, img_cols)\n",
        "else:\n",
        "    X_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 1)\n",
        "    X_test = X_test.reshape(X_test.shape[0], img_rows, img_cols, 1)\n",
        "    input_shape = (img_rows, img_cols, 1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "isZ8xRK0kW95",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model = Sequential()\n",
        "model.add(Conv2D(64, (3, 3), input_shape=(48, 48 ,1), padding='same', activation='relu'))\n",
        "model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "model.add(BatchNormalization())\n",
        "model.add(Dropout(0.2))\n",
        "\n",
        "model.add(Conv2D(128, (3, 3), activation='relu', padding='same'))\n",
        "model.add(Conv2D(128, (3, 3), activation='relu', padding='same'))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "model.add(BatchNormalization())\n",
        "model.add(Dropout(0.2))\n",
        "\n",
        "model.add(Conv2D(256, (3, 3), activation='relu', padding='same'))\n",
        "model.add(Conv2D(256, (3, 3), activation='relu', padding='same'))\n",
        "model.add(Conv2D(256, (3, 3), activation='relu', padding='same'))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "model.add(BatchNormalization())\n",
        "model.add(Dropout(0.2))\n",
        "\n",
        "model.add(Conv2D(512, (3, 3), activation='relu', padding='same'))\n",
        "model.add(Conv2D(512, (3, 3), activation='relu', padding='same'))\n",
        "model.add(Conv2D(512, (3, 3), activation='relu', padding='same'))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "model.add(BatchNormalization())\n",
        "model.add(Dropout(0.2))\n",
        "\n",
        "model.add(Flatten())\n",
        "model.add(Dense(4096, activation='relu'))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(num_classes, activation='softmax'))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hiaqLQfTL4Zk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "7124cc2b-6f92-4c13-c227-e5bf1b7352b0"
      },
      "source": [
        "epochs = 25\n",
        "lrate = 0.01\n",
        "decay = lrate/epochs\n",
        "adam = Adam(decay=decay)\n",
        "model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])\n",
        "print(model.summary())\n",
        "model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=epochs,verbose=1, batch_size=50)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_1 (Conv2D)            (None, 48, 48, 64)        640       \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 48, 48, 64)        36928     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 24, 24, 64)        0         \n",
            "_________________________________________________________________\n",
            "batch_normalization_1 (Batch (None, 24, 24, 64)        256       \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 24, 24, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 24, 24, 128)       73856     \n",
            "_________________________________________________________________\n",
            "conv2d_4 (Conv2D)            (None, 24, 24, 128)       147584    \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 12, 12, 128)       0         \n",
            "_________________________________________________________________\n",
            "batch_normalization_2 (Batch (None, 12, 12, 128)       512       \n",
            "_________________________________________________________________\n",
            "dropout_2 (Dropout)          (None, 12, 12, 128)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_5 (Conv2D)            (None, 12, 12, 256)       295168    \n",
            "_________________________________________________________________\n",
            "conv2d_6 (Conv2D)            (None, 12, 12, 256)       590080    \n",
            "_________________________________________________________________\n",
            "conv2d_7 (Conv2D)            (None, 12, 12, 256)       590080    \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 6, 6, 256)         0         \n",
            "_________________________________________________________________\n",
            "batch_normalization_3 (Batch (None, 6, 6, 256)         1024      \n",
            "_________________________________________________________________\n",
            "dropout_3 (Dropout)          (None, 6, 6, 256)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_8 (Conv2D)            (None, 6, 6, 512)         1180160   \n",
            "_________________________________________________________________\n",
            "conv2d_9 (Conv2D)            (None, 6, 6, 512)         2359808   \n",
            "_________________________________________________________________\n",
            "conv2d_10 (Conv2D)           (None, 6, 6, 512)         2359808   \n",
            "_________________________________________________________________\n",
            "max_pooling2d_4 (MaxPooling2 (None, 3, 3, 512)         0         \n",
            "_________________________________________________________________\n",
            "batch_normalization_4 (Batch (None, 3, 3, 512)         2048      \n",
            "_________________________________________________________________\n",
            "dropout_4 (Dropout)          (None, 3, 3, 512)         0         \n",
            "_________________________________________________________________\n",
            "flatten_1 (Flatten)          (None, 4608)              0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 4096)              18878464  \n",
            "_________________________________________________________________\n",
            "dropout_5 (Dropout)          (None, 4096)              0         \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 8)                 32776     \n",
            "=================================================================\n",
            "Total params: 26,549,192\n",
            "Trainable params: 26,547,272\n",
            "Non-trainable params: 1,920\n",
            "_________________________________________________________________\n",
            "None\n",
            "Train on 11047 samples, validate on 2762 samples\n",
            "Epoch 1/25\n",
            "11047/11047 [==============================] - 17s 2ms/step - loss: 2.6383 - accuracy: 0.2676 - val_loss: 2.0528 - val_accuracy: 0.1122\n",
            "Epoch 2/25\n",
            "11047/11047 [==============================] - 9s 813us/step - loss: 1.7027 - accuracy: 0.3704 - val_loss: 1.8452 - val_accuracy: 0.3548\n",
            "Epoch 3/25\n",
            "11047/11047 [==============================] - 9s 812us/step - loss: 1.5520 - accuracy: 0.4167 - val_loss: 1.6464 - val_accuracy: 0.3650\n",
            "Epoch 4/25\n",
            "11047/11047 [==============================] - 9s 819us/step - loss: 1.4606 - accuracy: 0.4415 - val_loss: 1.6201 - val_accuracy: 0.4381\n",
            "Epoch 5/25\n",
            "11047/11047 [==============================] - 9s 821us/step - loss: 1.3770 - accuracy: 0.4679 - val_loss: 1.4048 - val_accuracy: 0.4457\n",
            "Epoch 6/25\n",
            "11047/11047 [==============================] - 9s 816us/step - loss: 1.2960 - accuracy: 0.5000 - val_loss: 1.4718 - val_accuracy: 0.4721\n",
            "Epoch 7/25\n",
            "11047/11047 [==============================] - 9s 814us/step - loss: 1.2242 - accuracy: 0.5235 - val_loss: 1.2705 - val_accuracy: 0.5051\n",
            "Epoch 8/25\n",
            "11047/11047 [==============================] - 9s 818us/step - loss: 1.1458 - accuracy: 0.5525 - val_loss: 1.3864 - val_accuracy: 0.4424\n",
            "Epoch 9/25\n",
            "11047/11047 [==============================] - 9s 826us/step - loss: 1.0836 - accuracy: 0.5710 - val_loss: 1.5443 - val_accuracy: 0.4761\n",
            "Epoch 10/25\n",
            "11047/11047 [==============================] - 9s 813us/step - loss: 1.0099 - accuracy: 0.6079 - val_loss: 1.0712 - val_accuracy: 0.5905\n",
            "Epoch 11/25\n",
            "11047/11047 [==============================] - 9s 808us/step - loss: 0.9504 - accuracy: 0.6309 - val_loss: 1.0537 - val_accuracy: 0.5981\n",
            "Epoch 12/25\n",
            "11047/11047 [==============================] - 9s 812us/step - loss: 0.8894 - accuracy: 0.6462 - val_loss: 1.0384 - val_accuracy: 0.6137\n",
            "Epoch 13/25\n",
            "11047/11047 [==============================] - 9s 813us/step - loss: 0.8453 - accuracy: 0.6668 - val_loss: 0.9981 - val_accuracy: 0.6159\n",
            "Epoch 14/25\n",
            "11047/11047 [==============================] - 9s 810us/step - loss: 0.7900 - accuracy: 0.6915 - val_loss: 1.1721 - val_accuracy: 0.5876\n",
            "Epoch 15/25\n",
            "11047/11047 [==============================] - 9s 810us/step - loss: 0.7180 - accuracy: 0.7232 - val_loss: 1.1312 - val_accuracy: 0.6137\n",
            "Epoch 16/25\n",
            "11047/11047 [==============================] - 9s 811us/step - loss: 0.6670 - accuracy: 0.7426 - val_loss: 1.0622 - val_accuracy: 0.6466\n",
            "Epoch 17/25\n",
            "11047/11047 [==============================] - 9s 814us/step - loss: 0.6403 - accuracy: 0.7541 - val_loss: 0.9512 - val_accuracy: 0.6647\n",
            "Epoch 18/25\n",
            "11047/11047 [==============================] - 9s 811us/step - loss: 0.5603 - accuracy: 0.7858 - val_loss: 1.2411 - val_accuracy: 0.6285\n",
            "Epoch 19/25\n",
            "11047/11047 [==============================] - 9s 813us/step - loss: 0.5125 - accuracy: 0.8047 - val_loss: 1.0158 - val_accuracy: 0.6633\n",
            "Epoch 20/25\n",
            "11047/11047 [==============================] - 9s 812us/step - loss: 0.4738 - accuracy: 0.8202 - val_loss: 1.0977 - val_accuracy: 0.6684\n",
            "Epoch 21/25\n",
            "11047/11047 [==============================] - 9s 816us/step - loss: 0.4246 - accuracy: 0.8372 - val_loss: 1.0997 - val_accuracy: 0.6857\n",
            "Epoch 22/25\n",
            "11047/11047 [==============================] - 9s 816us/step - loss: 0.3689 - accuracy: 0.8570 - val_loss: 1.0168 - val_accuracy: 0.7013\n",
            "Epoch 23/25\n",
            "11047/11047 [==============================] - 9s 814us/step - loss: 0.3392 - accuracy: 0.8744 - val_loss: 1.0780 - val_accuracy: 0.6908\n",
            "Epoch 24/25\n",
            "11047/11047 [==============================] - 9s 815us/step - loss: 0.2909 - accuracy: 0.8918 - val_loss: 1.2704 - val_accuracy: 0.7053\n",
            "Epoch 25/25\n",
            "11047/11047 [==============================] - 9s 814us/step - loss: 0.3019 - accuracy: 0.8887 - val_loss: 1.2006 - val_accuracy: 0.7122\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.callbacks.History at 0x7f353121da90>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KbeYMo8cL83d",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "b4956670-f11d-4cfb-f9b8-ea818c174b9d"
      },
      "source": [
        "scores = model.evaluate(X_test, y_test, verbose=0)\n",
        "print(\"Accuracy: %.2f%%\" % (scores[1]*100))\n",
        "print('Test loss:', scores[0])\n",
        "print('Test accuracy:', scores[1])"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy: 71.22%\n",
            "Test loss: 1.200632430176041\n",
            "Test accuracy: 0.712165117263794\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WYgXOKPxPTwd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# confusion matrix"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vmsZHgf0r5rb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "outputId": "fa37c059-5224-4bbd-cb5f-d0e7f34400b7"
      },
      "source": [
        "Y_pred = model.predict(X_test)\n",
        "\n",
        "# Convert predictions classes to one hot vectors \n",
        "Y_pred_classes = np.argmax(Y_pred,axis = 1) \n",
        "\n",
        "# Convert validation observations to one hot vectors\n",
        "print(Y_pred_classes)\n",
        "\n",
        "Y_true = np.argmax(y_test,axis = 1)\n",
        "print(Y_true)\n",
        "\n",
        "# compute the confusion matrix\n",
        "cm = confusion_matrix(Y_true, Y_pred_classes)\n",
        "cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
        "\n",
        "# plot the confusion matrix\n",
        "f,ax = plt.subplots(figsize=(8, 8))\n",
        "sns.heatmap(cm, annot=True, linewidths=0.01,cmap=\"YlGnBu\",linecolor=\"gray\", fmt= '.1f',ax=ax)\n",
        "plt.xlabel(\"Predicted Label\")\n",
        "plt.ylabel(\"True Label\")\n",
        "plt.title(\"Confusion Matrix\")\n",
        "plt.show()"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[4 4 2 ... 4 4 5]\n",
            "[4 4 2 ... 5 5 5]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x576 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8nUqb0VoL43W",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uLV_iADDL46K",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EWeuKe7VL489",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p8eGwkUzL4--",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tmwaNYeOL5BL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}